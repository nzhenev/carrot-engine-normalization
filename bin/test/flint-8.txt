------INPUT------
This web site contains an advert from ad.foxytracking.com, which, when downloaded, sets a cookie belonging to the advert's domain (ad.foxytracking.com). 
------INPUT------
Then, the user visits another website, www.example2.com, which also contains an advert from ad.foxytracking.com, and which also sets a cookie belonging to that domain (ad.foxytracking.com). 
------INPUT------
Eventually, both of these cookies will be sent to the advertiser when loading their ads or visiting their website. 
------INPUT------
The advertiser can then use these cookies to build up a browsing history of the user across all the websites that have ads from this advertiser. 
------INPUT------
As of 2014, some websites were setting cookies readable for over 100third-party domains. 
------INPUT------
On average, a single website was setting 10cookies, with maximum number of cookies (first- and third-party) reaching over 800. 
------INPUT------
Supercookie A "supercookie" is a cookie with an origin of a Top-Level Domain (such as .com) or a Public Suffix (such as .co.uk). 
------INPUT------
It is important that supercookies are blocked by browsers, due to the security holes they introduce. 
------INPUT------
If unblocked, an attacker in control of a malicious website could set a supercookie and potentially disrupt or impersonate legitimate user requests to another website that shares the same Top-Level Domain or Public Suffix as the malicious website. 
------INPUT------
For example, a supercookie with an origin of .com, could maliciously affect a request made to example.com, even if the cookie did not originate from example.com. 
------INPUT------
This can be used to fake logins or change user information. 
------INPUT------
The Public Suffix List is a cross-vendor initiative to provide an accurate list of domain name suffixes changing. 
------INPUT------
Older versions of browsers may not have the most up-to-date list, and will therefore be vulnerable to supercookies from certain domains. 
------INPUT------
Supercookie (other uses) The term "supercookie" is sometimes used for tracking technologies that do not rely on HTTP cookies. 
------INPUT------
Two such "supercookie" mechanisms were found on Microsoft websites: cookie syncing that respawned MUID (Machine Unique Identifier) cookies, and ETag cookies. Due to media attention, Microsoft later disabled this code. 
------INPUT------
Zombie cookie Some cookies are automatically recreated after a user has deleted them; these are called zombie cookies. 
------INPUT------
This is accomplished by a script storing the content of the cookie in some other locations, such as the local storage available to Flash content, HTML5 storages and other client-side mechanisms, and then recreating the cookie from backup stores when the cookie's absence is detected. 
------INPUT------
Structure A cookie consists of seven components: (name, value) pair of the cookie (i.e. name=value) Expiry of the cookie Path the cookie is good for Domain the cookie is good for Need for a secure connection to use the cookie Whether or not the cookie can be accessed through other means than HTTP (i.e., JavaScript) The first component (name, value) is required to be explicitly set. 
------INPUT------
Tracking Tracking cookies may be used to track internet users' web browsing. 
------INPUT------
This can also be done in part by using the IP address of the computer requesting the page or the referrer field of the HTTP request header, but cookies allow for greater precision. 
------INPUT------
This can be demonstrated as follows: If the user requests a page of the site, but the request contains no cookie, the server presumes that this is the first page visited by the user; the server creates a random string and sends it as a cookie back to the browser together with the requested page; From this point on, the cookie will automatically be sent by the browser to the server every time a new page from the site is requested; the server sends the page as usual, but also stores the URL of the requested page, the date/time of the request, and the cookie in a log file. 
------INPUT------
By analyzing the log file collected in the process, it is then possible to find out which pages the user has visited, in what sequence, and for how long. 
------INPUT------
Setting a cookie Transfer of Web pages follows the HyperText Transfer Protocol (HTTP). 
------INPUT------
Regardless of cookies, browsers request a page from web servers by sending them a usually short text called 'HTTP request'. 
------INPUT------
For example, to access the page http://www.example.org/index.html, browsers connect to the server www.example.org sending it a request that looks like the following one: The server replies by sending the requested page preceded by a similar packet of text, called 'HTTP response'. 
------INPUT------
This packet may contain lines requesting the browser to store cookies: The server sends lines of Set-Cookie only if the server wishes the browser to store cookies. 
------INPUT------
Set-Cookie is a directive for the browser to store the cookie and send it back in future requests to the server (subject to expiration time or other cookie attributes), if the browser supports cookies and cookies are enabled. 
------INPUT------
For example, the browserrequests the page http://www.example.org/spec.htmlby sending the server www.example.org a request like the following: This is a request for another page from the same server, and differs from the first one above because it contains the string that the server has previously sent to the browser. 
------INPUT------
This way, the server knows that this request is related to the previous one. 
------INPUT------
The server answers by sending the requested page, possibly adding other cookies as well. 
------INPUT------
The value of a cookie can be modified by the server by sending a new Set-Cookie: name=newvalue line in response of a page request. 
------INPUT------
The browser then replaces the old value with the new one. 
------INPUT------
The value of a cookie may consist of any printable ASCII character (! through ~, unicode \u0021 through \u007E) excluding , and ; and excluding whitespace. 
------INPUT------
The name of the cookie also excludes = as that is the delimiter between the name and value. 
------INPUT------
The cookie standard RFC2965 is more limiting but not implemented by browsers. 
------INPUT------
The term "cookie crumb" is sometimes used to refer to the name-value pair.
